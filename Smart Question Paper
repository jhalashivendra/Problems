import cv2
import numpy as np

def detect_shape(contour):
    epsilon = 0.02 * cv2.arcLength(contour, True)
    
    approx = cv2.approxPolyDP(contour, epsilon, True)
    x, y, w, h = cv2.boundingRect(approx)
    
    aspect_ratio = w / float(h)
    area = cv2.contourArea(contour)
    (x, y), radius = cv2.minEnclosingCircle(contour)
    circle_area = np.pi * (radius ** 2)
    if len(contour) >= 5:
        ellipse = cv2.fitEllipse(contour)
        ellipse_aspect_ratio = max(ellipse[1]) / min(ellipse[1])
    
    else:
        ellipse_aspect_ratio = 0
    if len(approx) == 4:
        if 0.80 <= aspect_ratio <= 1.20:
            return 'square'
        else:
            return 'rectangle'
    elif len(approx) > 4:
        if 0.85 <= area / circle_area <= 1.15:
            return 'circle'
        
        else:
            return 'ellipse'
    
    else:
        return 'unidentified'

#reading the image
image = cv2.imread(r'C:\Users\Shivendra Jhala\Downloads\contours.png')
#grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#thresholding
_, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)

contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

for contour in contours:
    area = cv2.contourArea(contour)
    
    M = cv2.moments(contour)
    if M['m00'] != 0:
        cx = int(M['m10'] / M['m00'])
        cy = int(M['m01'] / M['m00'])
    else:
        cx, cy = 0, 0

    # Detecting shape
    shape = detect_shape(contour)

    
    if shape == 'rectangle':
        color = (255, 0, 0)  #blue
    elif shape == 'square':
        color = (0, 255, 0) #green
    elif shape == 'circle':
        color = (0, 0, 255)  # red
    elif shape == 'ellipse':
        color = (255, 0, 255)  # purple
    else:
        color = (255, 255, 255)  # White

    print(f"Contour area: {area}, Centroid: ({cx}, {cy}), Shape: {shape}")

    cv2.drawContours(image, [contour], -1, color, 2)


    cv2.circle(image, (cx, cy), 5, color, -1)


max_width = 800
max_height = 600
height, width = image.shape[:2]

if width > max_width or height > max_height:
    scaling_factor = min(max_width / width, max_height / height)
    image = cv2.resize(image, None, fx=scaling_factor, fy=scaling_factor, interpolation=cv2.INTER_AREA)


cv2.imshow('Image with Contours and Centroids', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
